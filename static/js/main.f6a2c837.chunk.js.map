{"version":3,"sources":["components/MenuItem/MenuItem.jsx","components/Directory/Directory.jsx","pages/homepage/Homepage.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","title","subtitle","imageUrl","size","history","linkUrl","match","MenuItemContainer","styled","div","BackgroundImage","className","onClick","push","url","toUpperCase","Directory","DirectoryContainer","id","map","otherSectionProps","key","Homepage","HomepageContainer","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"shCAKA,IAqDeA,eArDE,SAAC,GAQX,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,SACAC,EAKI,EALJA,SACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,QACAC,EACI,EADJA,MAEMC,EAAoBC,IAAOC,IAAV,KAkBjBC,EAAkBF,IAAOC,IAAV,KAIL,gBAAGP,EAAH,EAAGA,SAAH,oBAAyBA,EAAzB,eAQhB,OACE,kBAACK,EAAD,CACEI,UAAS,UAAKR,EAAL,cACTS,QAAS,kBAAMR,EAAQS,KAAR,UAAgBP,EAAMQ,KAAtB,OAA4BT,MAE3C,kBAACK,EAAD,CAAiBR,SAAUA,IAC3B,yBAAKS,UAAU,WACb,wBAAIA,UAAU,SAASX,EAAMe,eAC7B,0BAAMJ,UAAU,YAAYV,Q,0KC/CpC,IAyDee,EAzDG,WAChB,IAAMC,EAAqBT,IAAOC,IAAV,KA+CxB,OACE,kBAACQ,EAAD,KAzCe,CACf,CACEjB,MAAO,SACPE,SACE,mGACFgB,GAAI,EACJb,QAAS,eAEX,CACEL,MAAO,OACPE,SACE,sIACFgB,GAAI,EACJb,QAAS,aAEX,CACEL,MAAO,SACPE,SACE,mGACFgB,GAAI,EACJb,QAAS,eAEX,CACEL,MAAO,SACPE,SACE,sHACFC,KAAM,QACNe,GAAI,EACJb,QAAS,eAEX,CACEL,MAAO,UACPE,SACE,mGACFC,KAAM,QACNe,GAAI,EACJb,QAAS,iBAMCc,KAAI,gBAAGD,EAAH,EAAGA,GAAOE,EAAV,6BACZ,kBAAC,EAAD,eAAUC,IAAKH,GAAQE,S,6KCnD/B,IAeeE,EAfE,WACf,IAAMC,EAAoBf,IAAOC,IAAV,KAOvB,OACE,kBAACc,EAAD,KACE,kBAAC,EAAD,QCASC,MAVf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAIC,UAAWL,OCGrBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2D,YCXN0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAS,oBACtB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6a2c837.chunk.js","sourcesContent":["import React from 'react';\nimport './MenuItem.scss';\nimport styled from 'styled-components';\nimport { withRouter } from 'react-router-dom';\n\nconst MenuItem = ({\n  title,\n  subtitle,\n  imageUrl,\n  size,\n  history,\n  linkUrl,\n  match,\n}) => {\n  const MenuItemContainer = styled.div`\n    min-width: 30%;\n    height: 240px;\n    flex: 1 1 auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid black;\n    margin: 0 7.5px 15px;\n    border-radius: 0.5rem;\n    overflow: hidden;\n\n    &:hover {\n      cursor: pointer;\n      opacity: 0.9;\n    }\n  `;\n\n  const BackgroundImage = styled.div`\n    width: 100%;\n    height: 100%;\n    background-size: contain;\n    background: ${({ imageUrl }) => `url(${imageUrl}) center`};\n\n    &:hover {\n      transform: scale(1.1);\n      transition: transform 5s cubic-bezier(0.25, 0.45, 0.45, 0.95);\n    }\n  `;\n\n  return (\n    <MenuItemContainer\n      className={`${size} menu-item`}\n      onClick={() => history.push(`${match.url}${linkUrl}`)}\n    >\n      <BackgroundImage imageUrl={imageUrl}></BackgroundImage>\n      <div className='content'>\n        <h1 className='title'>{title.toUpperCase()}</h1>\n        <span className='subtitle'>{subtitle}</span>\n      </div>\n    </MenuItemContainer>\n  );\n};\n\nexport default withRouter(MenuItem);\n","import React from 'react';\nimport './Directory.scss';\nimport MenuItem from '../MenuItem/MenuItem';\nimport styled from 'styled-components';\n\nconst Directory = () => {\n  const DirectoryContainer = styled.div`\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n  `;\n\n  const sections = [\n    {\n      title: 'Swords',\n      imageUrl:\n        'https://cdnb.artstation.com/p/assets/images/images/003/355/989/large/jongmo-nam-4.jpg?1515177802',\n      id: 1,\n      linkUrl: 'shop/swords',\n    },\n    {\n      title: 'Bows',\n      imageUrl:\n        'https://cdnb.artstation.com/p/assets/images/images/013/322/151/large/antonio-bifulco-windrunner-doodle-05-10-2018-04.jpg?1539084057',\n      id: 2,\n      linkUrl: 'shop/bows',\n    },\n    {\n      title: 'Staffs',\n      imageUrl:\n        'https://cdnb.artstation.com/p/assets/images/images/003/355/991/large/jongmo-nam-2.jpg?1472781341',\n      id: 3,\n      linkUrl: 'shop/staffs',\n    },\n    {\n      title: 'Armors',\n      imageUrl:\n        'https://preview.redd.it/kpejg9d387r31.png?width=960&crop=smart&auto=webp&s=8b689ad9e126d5e0a6c5d12e24e479488acc341f',\n      size: 'large',\n      id: 4,\n      linkUrl: 'shop/armors',\n    },\n    {\n      title: 'Shields',\n      imageUrl:\n        'https://cdna.artstation.com/p/assets/images/images/003/355/990/large/jongmo-nam-3.jpg?1472781335',\n      size: 'large',\n      id: 5,\n      linkUrl: 'shop/shields',\n    },\n  ];\n\n  return (\n    <DirectoryContainer>\n      {sections.map(({ id, ...otherSectionProps }) => (\n        <MenuItem key={id} {...otherSectionProps} />\n      ))}\n    </DirectoryContainer>\n  );\n};\n\nexport default Directory;\n","import React from 'react';\nimport './Homepage.scss';\nimport Directory from '../../components/Directory/Directory';\nimport styled from 'styled-components';\n\nconst Homepage = () => {\n  const HomepageContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 20px 80px;\n  `;\n\n  return (\n    <HomepageContainer>\n      <Directory />\n    </HomepageContainer>\n  );\n};\n\nexport default Homepage;\n","import React from 'react';\nimport './App.scss';\nimport Homepage from './pages/homepage/Homepage';\nimport { Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Switch>\n        <Route exact path='/' component={Homepage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename='/react-ecommerce'>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}